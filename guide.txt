======== DJANGO ========

http://127.0.0.1:8000/


SWEAT LESSONS:

- as imagens precisam ser armazenadas em static/nomedapasta 
para que o django as encontre e importe no html

- python manage.py runserver 9000 (pra rodar num servidor
que nao seja o 8000 padrão)

=========================================================	
====================== AULA 01 ==========================
=========================================================	

1 = criar pasta do projeto

2 = criar o venv 

	$ python3 -m venv 'nome'

3 = ativar o venv

	$ source venv/bin/activate

4 = instalar o django

	$ pip install django

5 = criar o projeto django

	$ django-admin startproject petwash_project .

6 = rodar o projeto django

	$ python manage.py runserver

6 = criar o app base

	$ python manage.py startapp base

===============================================================

	se tiver erro de importação, django.db, django.http e etc
	eh pq o vscode nao ta lendo pelo venv do projeto
	dar um command shift p
	>Python: Select Interpreter
	escolher o venv do projeto
	fonte: https://flaviocopes.com/error-unable-import-django-db/

===============================================================

	arquivos da pasta do app:

	views.py = as funcionalidades do projeto, se comunica com a urls.py do projeto
	tests.py = ali testa as funcionalidades do projeto
	models.py = estrutura de banco de dados
	admin.py = indica quais as models/tabelas ficam disponíveis pro usuário no painel administrativo
	apps.py = configuração do app

===============================================================

7 = ir no settings.py (projeto) e colocar o nome do app no

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'base',
]

8 = ir no views e colocar a pagina 

	from django.shortcuts import render
	from django.http import HttpResponse

	def index(request):
		return render(request, 'index.html')

===============================================================
funcionalidades são no app
coisas gerais são no projeto
===============================================================

9 = dentro da pasta do app, criar a pasta templates e arquivo index.html

10 = e também a pasta static (pro css e js)




=========================================================	
====================== AULA 02 ==========================
=========================================================

- criar contact.html (botar no views.py e no urls.py)

<BOOTSTRAP SETUP>

-- $ pip install django-bootstrap-v5

-- colocar o bootstrap no settings.py

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'base',
    'bootstrap5',
]

-- colocar o bootstrap no html da pagina

	<!doctype html>
	{% load bootstrap5 %}

	<link href="/static/starter-template.css" rel="stylesheet">
    <link href="/static/bootstrap.min.css" rel="stylesheet">
    <script src="/static/bootstrap.bundle.min.js"></script>


</BOOTSTRAP SETUP>

==========
No Django temos:

VARIÁVEIS = valores que ficarão disponíveis para serem exibidos no html

TEMPLATE TAGS = marcações especiais que irão realizar ações na página (if, for, while...)

FILTROS = alteram o conteúdo de exibição de uma variável
==========

Exemplo de criação de variável com dicionário:

NO VIEWS:

	def contact(request):
		context = {
			'phonenumber': '999999',
			'tutor': 'Maria'
		}
		return render(request, 'contact.html', context)

NO HTML:

	<p> 
		Envie uma mensagem através do formulário abaixo ou ligue para o telefone {{phonenumber}} e fale com o responsável {{tutor|upper}}.
	</p>

o |upper é um FILTRO, tem vários

------

No formulário, tem que colocar o method POST para enviar as informações:

<form method="POST">

(existe o método POST e o GET na web, métodos de envio e recebimento de informações)

abaixo do form, TEM QUE COLOCAR uma chave de segurança pra proteger de inputs maliciosos

{% csrf_token %}

------

colocar no views:

def contact(request):
    context = {
        'phonenumber': '999999',
        'tutor': 'Maria'
    }
	===============
    if request.method == 'POST':
        print(request.POST)
	==============
    return render(request, 'contact.html', context)

isso faz o sistema pegar as informações enviadas 


=========================================================	
====================== AULA 03 ==========================
=========================================================

SISTEMA DE FORMS 

1 = criar forms.py dentro da pasta base

	from django import forms

	class ContactForm(forms.Form):
		name = forms.CharField()
		email = forms.EmailField()
		message = forms.CharField(widget=forms.Textarea)


2 = ir no views.py e importar modulo

	from base.forms import ContactForm


3 = adicionar no def do contact:

	def contact(request):
		if request.method == 'GET':
			form = ContactForm()
		else:
			form = ContactForm(request.POST)

		responsible = {
			'responsible_number': '999999',
			'responsible_name': 'Maria',
			'form': form
		}
		if request.method == 'POST':
			print(request.POST)
		return render(request, 'contact.html', responsible)


4 = no mesmo arq, ir no html do formulario e colocar:

	<form action="" method="POST" id="form">
				{% csrf_token %}
-->				{% bootstrap_form form %}



5 = apagar o html antigo do form


6 = adicionar o novalidate na html do form 
	(ele torna o preenchimento de todos os campos obrigatórios)

	<form action="" method="POST" id="form" novalidate>


7 = para configurar mensagem de confirmação de envio, ir no views.py:

	def contact(request):
		success = False #######
		if request.method == 'GET':
			form = ContactForm()
		else:
			form = ContactForm(request.POST)
			if form.is_valid(): ##########
				success= True ###########

		responsible = {
			'responsible_number': '999999',
			'responsible_name': 'Maria',
			'form': form,
			'success': success ############
		}
		
		if request.method == 'POST':
			print(request.POST)
		return render(request, 'contact.html', responsible)


8 = e colocar no html:

	<form action="" method="POST" id="form" novalidate>
		{% csrf_token %}
		{% bootstrap_form form %}

		{% if success %} ###########

			<p class="alert alert-success"> Message sent successfully!</p> ########

		{% endif %} ##########

		<button type="submit" class="btn btn-primary">Send</button>	
   	</form>


=========================================================	
====================== AULA 04 ==========================
=========================================================

1 = 